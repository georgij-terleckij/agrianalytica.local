import {BrowserRouter as Router, Routes, Route, Navigate } from "react-router-dom";
import HomePage from "./pages/home/HomePage";
import LoginPage from "./pages/LoginPage.jsx";
import NotFound from "./pages/NotFound.jsx";
// import PrivateRoute from "./components/PrivateRoute";
import Layout from "./components/dashboard_client/Layout.jsx";
import Dashboard from "./pages/client/Dashboard.jsx";
import Profile from "./pages/client/Profile.jsx";
import Settings from "./pages/client/Settings.jsx";
import ClientsPage from "./pages/client/ClientsPage.jsx";

// –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
const isAuthenticated = () => {
    return !!localStorage.getItem("token"); // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–æ–∫–µ–Ω –≤ localStorage
};

// –ó–∞—â–∏—â–µ–Ω–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç (–ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞ /login, –µ—Å–ª–∏ –Ω–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏)
const PrivateRoute = ({ element }) => {
    return isAuthenticated() ? element : <Navigate to="/login" replace />;
};
const AppRoutes = () => {
    return (
        <Router>
            <Routes>
                {/* üîπ –ì–ª–∞–≤–Ω—ã–π —Å–∞–π—Ç */}
                {/*<Route path="/" element={<SiteLayout />} />*/}
                <Route path="/" element={<HomePage/>}/>;
                <Route path="/login" element={<LoginPage/>}/>;

                {/* üîπ –ö–ª–∏–µ–Ω—Ç—Å–∫–∞—è –∞–¥–º–∏–Ω–∫–∞ */}
                <Route path="/client/*" element={<PrivateRoute element={<Layout/>}/>}>
                    <Route path="dashboard" element={<Dashboard />} />
                    <Route path="list" element={<ClientsPage />} />
                    <Route path="settings" element={<Settings />} />
                    {/*<Route index element={<Dashboard/>}/>*/}
                    <Route path="profile" element={<Profile/>}/>
                    {/*<Route path="list" element={<ClientsPage/>}/>*/}
                </Route>

                {/* 404 - –°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ */}
                <Route path="*" element={<NotFound/>}/>
            </Routes>
        </Router>
    );
};

export default AppRoutes;
